#!/usr/bin/env python3

import argparse
import subprocess
import pathlib
import sys

DIR = pathlib.Path.home().joinpath('.dotfiles')


def run(command):
    try:
        r = subprocess.run(
            command,
            check=True,
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE,
            universal_newlines=True
        )
        return r.stdout
    except Exception as error:
        print('failed with the following error:', '\n')

        if isinstance(error, subprocess.CalledProcessError):
            print(error.stderr)
        else:
            print(error)

        exit(1)


def run_nix(sub_command):
    run(["nix", "--extra-experimental-features",
         "nix-command flakes", *sub_command, DIR])

def switch():
    print("switching configuration ...")
    cmd = ["sudo", "nixos-rebuild"]

    if sys.platform == "darwin":
        cmd = ["darwin-rebuild"]
        boot_loader = []

    run([*cmd, "switch", "--flake", DIR])

def test():
    print("(test) applying configurations ...")
    cmd = ["sudo", "nixos-rebuild"]

    if sys.platform == "darwin":
        cmd = ["darwin-rebuild"]

    run([*cmd, "test", "--flake", DIR])


def main():
    parser = argparse.ArgumentParser(
        prog="up",
        description="easily apply flake-based system changes."
    )

    subparsers = parser.add_subparsers(metavar="", dest="command")
    subparsers.add_parser('boot',	help='switch and install boot loader')
    subparsers.add_parser('pull',	help='update flake inputs')
    subparsers.add_parser('test',	help='quickly test configurations')
    subparsers.add_parser('revert',	help='roll back to previous generation')
    subparsers.add_parser('prune',	help='run garbage collection')
    subparsers.add_parser(
        'theme',
        help='switch the theme of all supported apps'
    )

    args = parser.parse_args()

    if args.command == None:
        switch(False)
    elif args.command == "pull":
        print("updating flake inputs ...")
        run_nix(["flake", "update"])
    elif args.command == "test":
        test()
    elif args.command == "revert":
        print("Not implemented")
    elif args.command == "prune":
        run(["sudo", "nix-collect-garbage"])
    elif args.command == "theme":
        print("Not implemented")


if __name__ == '__main__':
    main()
